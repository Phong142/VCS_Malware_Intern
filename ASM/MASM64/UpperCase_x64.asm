extrn GetStdHandle		:PROC
extrn ReadFile			:PROC
extrn WriteFile			:PROC
extrn ExitProcess		:PROC

.data
	sTextIn		db "String = ", 0h
	sTextOut	db "String Uppercased = ", 0h

.data?
	String		db 30 dup(?)
	nByte		dd 0

.code
main proc
	mov		rbp, rsp
	sub		rsp, 38h								;Shadow Space + Alig + Local variable

	mov		rcx, -10							;STD_INPUT_HANDLE
	call	GetStdHandle
	mov		[rbp - 08h], rax					;[rbp - 08h] = hInput
	mov		rcx, -11							;STD_OUTPUT_HANDLE
	call	GetStdHandle
	mov		[rbp - 10h], rax					;[rbp - 10h] = hOuput
	
	xor		r14, r14

	mov		rcx, [rbp - 10h]
	mov		rdx, offset sTextIn
	mov		r8, sizeof sTextIn
	mov		r9, offset nByte
	mov		[rsp + 20h], r14
	call	WriteFile

	mov		rcx, [rbp - 08h]
	mov		rdx, offset String
	mov		r8, 30
	mov		r9, offset nByte
	mov		[rsp + 20h], r14
	call	ReadFile
	
	mov		rcx, [rbp - 10h]
	mov		rdx, offset sTextOut
	mov		r8, sizeof sTextOut
	mov		r9, offset nByte
	mov		[rsp + 20h], r14
	call	WriteFile

	mov		rcx, offset String					;rcx = &String
	call	upper								;call 
	mov		bx, 0D0Ah							;String + 0D0Ah
	mov		word ptr [rsi + rax], bx
	add		rax, 2

	mov		rcx, [rbp - 10h]
	mov		rdx, offset String
	mov		r8, rax
	mov		r9, offset nByte
	mov		[rsp + 20h], r14
	call	WriteFile

	xor		rcx, rcx
	call	ExitProcess

main endp

upper proc			;upper(rsi = &String, rdi = String.length	--> return rsi = &String, rax = String.length)
	push	rbp
	mov		rbp, rsp
	mov		rsi, rcx
	xor		rdi, rdi

	@Search:
		mov		dl, byte ptr [rsi + rdi]
		cmp		dl, 0Dh
		jz		@Exit
		cmp		dl, 'a'
		jl		@Inc
		cmp		dl, 'z'
		jg		@Inc
		sub		dl, 20h
		mov		byte ptr [rsi + rdi], dl

	@Inc:
		inc		rdi
		jmp		@Search

	@Exit:
		mov		rax, rdi
		mov		rsp, rbp
		pop		rbp
		ret

upper endp
end