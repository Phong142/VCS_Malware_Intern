extrn GetStdHandle	:PROC
extrn ReadFile		:PROC
extrn WriteFile		:PROC
extrn ExitProcess	:PROC

.data
	sTextIn		db "String = ", 0h
	sTextOut	db "String reversed = ", 0h

.data?
	String		db 256 dup(?)
	nByte		dd 0

.code
main proc
	mov		rbp, rsp
	sub		rsp, 38h					;Shadow Space + Align + 2 local variable

	mov		rcx, -10
	call	GetStdHandle
	mov		[rbp - 08h], rax			;[rbp - 08h] = STD_INPUT_DANDLE
	mov		rcx, -11
	call	GetStdHandle
	mov		[rbp - 10h], rax			;[rbp - 10h] = STD_OUTPUT_DANDLE

	xor		r15, r15

	mov		rcx, [rbp - 10h]
	mov		rdx, offset sTextIn
	mov		r8, sizeof sTextIn
	mov		r9, offset nByte
	mov		[rsp + 20h], r15
	call	WriteFile					;write text string

	mov		rcx, [rbp - 08h]
	mov		rdx, offset String
	mov		r8, 256
	mov		r9, offset nByte
	mov		[rsp + 20h], r15
	call	ReadFile					;Read data 

	mov		rcx, [rbp - 10h]
	mov		rdx, offset sTextOut
	mov		r8, sizeof sTextOut
	mov		r9, offset nByte
	mov		[rsp + 20h], r15
	call	WriteFile					;write text string

	mov		rsi, offset String
	call	reverse						;reverse (rsi = &String		--> return rsi = &String, rdi = String.length)
	mov		bx, 0A0Dh
	mov		word ptr [rsi + rdi], bx	;insert \r\n
	add		rdi, 2

	mov		rcx, [rbp - 10h]
	mov		rdx, rsi
	mov		r8, rdi
	mov		r9, offset nByte
	mov		[rsp + 20h], r15
	call	WriteFile					;print string reversed 

	xor		rcx, rcx
	call	ExitProcess

main endp

reverse proc				;reverse (rsi = &String		--> return rsi = &String, rdi = String.length)
	push	rbp
	mov		rbp, rsp
	push	rax
	push	rcx
	push	rdx
	mov		rdi, rsi		;rdi = &String
	mov		rdx, rsi		;rdx = &String
	xor		rax, rax
	xor		rcx, rcx
	cld
	
	@LoopSym:
		lodsb				;al = [esi++]
		cmp		al, 0Dh
		jz		@PopSym
		push	rax			;push [rax] to stack
		inc		rcx
		jmp		@LoopSym

	@PopSym:
		test	rcx, rcx
		jz		@Exit
		pop		rax
		stosb				;[edi++] = al
		dec		rcx
		jmp		@PopSym

	@Exit:
		sub		rdi, rdx	;rdi = String.length
		mov		rsi, rdx	;rsi = &String
		pop		rdx
		pop		rcx
		pop		rax
		mov		rsp, rbp
		pop		rbp
		ret

reverse endp
end