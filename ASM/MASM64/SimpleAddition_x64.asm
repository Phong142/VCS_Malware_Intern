extrn GetStdHandle		:PROC
extrn ReadFile			:PROC
extrn WriteFile			:PROC
extrn ExitProcess		:PROC
extrn GetProcessHeap	:PROC
extrn HeapAlloc			:PROC

.data
	sTextIn1	db "Num1 = ", 0h
	sTextIn2	db "Num2 = ", 0h
	sTextOut	db "Result = ", 0h

.data?
	sNum	db 32 dup(?)
	nNum	dd 0
	nByte	dd 0

.code
main proc
	mov		rbp, rsp
	sub		rsp, 38h

	mov		rcx, -10					;STD_INPUT_HANDLE
	call	GetStdHandle
	mov		[rbp - 08h], rax
	mov		rcx, -11					;STD_OUTPUT_HANDLE
	call	GetStdHandle
	mov		[rbp - 10h], rax

	xor		r14, r14

	mov		rcx, [rbp - 10h]			;Text Num1
	mov		rdx, offset sTextIn1
	mov		r8, sizeof sTextIn1
	mov		r9, offset nByte
	mov		[rsp + 20h], r14
	call	WriteFile

	mov		rcx, [rbp - 08h]			;Read Num1
	mov		rdx, offset sNum
	mov		r8, 31
	mov		r9, offset nByte
	mov		[rsp + 20h], r14
	call	ReadFile

	mov		rsi, offset sNum			;rsi = &Num1
	call	atoi						;atoi(&num1 --> (int)num1)
	add		nNum, eax					;add nNum += Num1 

	mov		rcx, [rbp - 10h]			;Text num2
	mov		rdx, offset sTextIn2
	mov		r8, sizeof sTextIn2
	mov		r9, offset nByte
	mov		[rsp + 20h], r14
	call	WriteFile

	mov		rcx, [rbp - 08h]			;Read Num2
	mov		rdx, offset sNum
	mov		r8, 31
	mov		r9, offset nByte
	mov		[rsp + 20h], r14
	call	ReadFile

	mov		rsi, offset sNum			;rsi = &num2
	call	atoi						;atoi(&num2 --> (int)num2)
	add		nNum, eax					;nNum += num2

	mov		rcx, [rbp - 10h]			;Text result
	mov		rdx, offset sTextOut
	mov		r8, sizeof sTextOut
	mov		r9, offset nByte
	mov		[rsp + 20h], r14
	call	WriteFile

	mov		esi, nNum					;esi = (int)nNum
	call	itoa						;itoa((int)nNum --> &nNum)
			
	mov		bx, 0D0Ah					
	mov		word ptr [rsi + rax], bx	;&nNum + 0D0Ah
	add		rax, 2
	mov		rcx, [rbp - 10h]
	mov		rdx, rsi
	mov		r8, rax
	mov		r9, offset nByte
	mov		[rsp + 20h], r14
	call	WriteFile
	
	mov		rcx, rcx
	call	ExitProcess
main endp

atoi proc		;atoi(rsi = &sNum	-->	return rax = Num)
	push	rbp
	mov		rbp, rsp
	push	rbx
	push	rdx
	xor		rax, rax
	mov		rbx, 10

	@TextNum:
		xor		rdx, rdx
		mov		dl, byte ptr [rsi]
		cmp		dl, '0'
		jl		@Exit
		cmp		dl, '9'
		jg		@Exit
		sub		dl, 30h
		add		rax, rdx
		mul		rbx
		inc		rsi
		jmp		@TextNum

	@Exit:
		xor		rdx, rdx
		div		rbx
		pop		rdx
		pop		rbx
		mov		rsp, rbp
		pop		rbp
		ret

atoi endp

itoa proc		;itoa(rsi = num	--> return rax = &(num).len, rsi = &(num))
	push	rbp
	mov		rbp, rsp
	push	rbx
	push	rdx
	xor		rbx, rbx
	mov		rbx, rsi

	sub		rsp, 20h			;Shadow Space 
	call	GetProcessHeap		;Get Handle Heap
	mov		rcx, rax			;Return value to rcx
	mov		rdx, 0				
	mov		r8, 21				;Size Alloc
	call	HeapAlloc			;HeapAlloc(Handle, HEAP_ZERO_MEMORY, size)
	add		rsp, 20h			;Remove Shadow Space
	mov		rdi, rax
	add		rdi, 20				;rdi = *(str + 20)

	mov		rax, rbx			;Num
	mov		rsi, rdi
	mov		rbx, 10

	@NumText:
		xor		rdx, rdx
		div		rbx
		add		dl, 30h
		mov		byte ptr [rdi], dl
		dec		rdi
		test	rax, rax
		jz		@Exit
		jmp		@NumText

	@Exit:
		sub		rsi, rdi
		mov		rax, rsi
		mov		rsi, rdi
		inc		rsi
		pop		rdx
		pop		rbx
		mov		rsp, rbp
		pop		rbp
		ret

itoa endp
end