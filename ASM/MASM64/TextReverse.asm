extrn   CreateWindowExA:    proc
extrn   DefWindowProcA:     proc
extrn   DispatchMessageA:   proc
extrn   ExitProcess:        proc
extrn   LoadIconA:          proc
extrn   LoadCursorA:        proc
extrn   GetDlgItemTextA:    proc
extrn   GetCommandLineA:    proc
extrn   GetMessageA:        proc
extrn   GetModuleHandleA:   proc
extrn   PostQuitMessage:    proc
extrn   RegisterClassExA:   proc
extrn   SetDlgItemTextA:    proc
extrn   ShowWindow:         proc
extrn   TranslateMessage:   proc

.data
	szClassName			db "TextReverse", 0
	lpMainWindowName	db "Text Reverse", 0
	lpClassNameEdit		db "EDIT", 0
	lpClassNameStatic	db "STATIC", 0
	lpWindowNameInput	db "Input String:", 0
	lpWindowNameOutput	db "Reversed String:", 0

.data?
	wndclass	db 80 dup(?)
	msg			db 48 dup(?)
	hwnd		dq ?
	string		db 256 dup(?)

.code
WinMainCRTStartup proc
	mov		rbp, rsp
	sub		rsp, 28h

	xor		rcx, rcx
	call	GetModuleHandleA
	mov		rcx, rax				;rcx = return
	call	GetCommandLineA
	mov		r8, rax					
	mov		r9, 10
	xor		rdx, rdx
	call	WinMain

	mov		rsp, rbp
	pop		rbp
	ret
WinMainCRTStartup endp

WinMain proc
	push	rbp
	mov		rbp, rsp
	sub		rsp, 60h
	;WndClassExA
	mov		r13, rcx									;hInstance
	mov		qword ptr [wndclass + 18h], rcx				;hInstance
	mov		dword ptr [wndclass], 80					;cbSize = sizeof WndClassExA
	mov		dword ptr [wndclass + 4], 2 or 1			;style = CS_HREDRAW | CS_VREDRAW
    lea     rcx, WinProc
	mov		rcx, offset WinProc
	mov		qword ptr [wndclass + 8], rcx				;lpfnWndProc = WinProc
	mov		dword ptr [wndclass + 10h], 0				;cbClsExtra = 0
	mov		dword ptr [wndclass + 14h], 0				;cbWndExtra = 0
	xor		rcx, rcx
	mov		rdx, 32512									;IDI_APPLICATION = Default application icon
	call	LoadIconA
	mov		qword ptr [wndclass + 20h], rax				;hIcon = LoadIconA(NULL, IDI_APPLICATION)
	xor		rcx, rcx
	mov		rdx, 32512									;IDC_ARROW aka standard cursor ids
	call	LoadCursorA
	mov		qword ptr [wndclass + 28h], rax				;hCursor = LoadCursorA(NULL, IDI_APPLICATION)
	mov		qword ptr [wndclass + 30h], 1				;hbrBackground
	mov		qword ptr [wndclass + 38h], 0				;lpszMenuName = null
	mov		rcx, offset szClassName
	mov		qword ptr [wndclass + 40h], rcx				;lpszClassName
	mov		rcx, qword ptr [wndclass + 20h]
	mov		qword ptr [wndclass + 48h], rcx				;hIconSm = LoadIconA(NULL, IDI_APPLICATION)

	lea		rcx, wndclass
	call	RegisterClassExA
	test	rax, rax
	jz		exitProg

	xor		rcx, rcx									;dwExStyle
	mov		rdx, offset szClassName
	mov		r8, offset lpMainWindowName
	mov		r9, 0cf0000h								;WS_OVERLAPPEDWINDOW
	mov		dword ptr [rsp + 20h], 80000000h			;CW_USEDEFAULT
	mov		dword ptr [rsp + 28h], 80000000h			;CW_USEDEFAULT
	mov		qword ptr [rsp + 30h], 500					;width
	mov		qword ptr [rsp + 38h], 150					;height
	mov		qword ptr [rsp + 40h], 0					;HWND_DESKTOP -> child window to desktop
	mov		qword ptr [rsp + 48h], 0					;no menu
	mov		qword ptr [rsp + 50h], r13					;hInstance
	mov		qword ptr [rsp + 58h], 0					;no additional data
	call	CreateWindowExA
;	mov		hwnd, rax

	mov		rcx, rax
	mov		rdx, 1
	call	ShowWindow

	getMessage:
		mov		rcx, offset msg
		xor		rdx, rdx
		xor		r8, r8
		xor		r9, r9
		call	GetMessageA
		cmp		rax, 0							 ;--> PostQuitMessage(0)
		jz		exitProg
		;translate virtual key msg into character msg
		mov		rcx, offset msg
		call	TranslateMessage
		mov		rcx, offset msg
		call	DispatchMessageA
		jmp		getMessage

	exitProg:
		mov		rcx, rax
		call	ExitProcess

WinMain endp

WinProc proc
	push	rbp
	mov		rbp, rsp
	sub		rsp, 70h
	mov		[rbp + 10h], rcx			;hwnd
	mov		[rbp + 18h], rdx			;msg
	mov		[rbp + 20h], r8				;wparam
	mov		[rbp + 28h], r9				;lparam
	mov		rax, rdx					;msg

	dec		rax		
	jz		WM_CREATE					;WM_CREATE = 1
	dec		rax 
	jz		WM_DESTROY					;WM_DESTROY = 2
	sub		rax, 10fh 
	jz		WM_COMMAND					;WM_COMMAND = 111h
	;default --> return DefWindowProcA
	mov		rcx, [rbp + 10h]
	mov		rdx, [rbp + 18h]
	mov		r8, [rbp + 20h]
	mov		r9, [rbp + 28h]
	call	DefWindowProcA			;DefWindowProcA(hwnd, message, wParam, lParam)
	jmp		exitProc

	WM_CREATE:
		mov     qword ptr [rsp + 20h], 10   ;x = 10 from mainwindow
		mov     qword ptr [rsp + 28h], 10   ;y = 10 from mainwindow
		mov     qword ptr [rsp + 30h], 150  ;width = 250
		mov     qword ptr [rsp + 38h], 30   ;height = 30
		mov     rax, [rbp + 10h]            ;hwnd
		mov     qword ptr [rsp + 40h], rax
		mov     qword ptr [rsp + 48h], 11   ;set hMenu = 1
		mov     qword ptr [rsp + 50h], 0
		mov     qword ptr [rsp + 58h], 0
		xor     rcx, rcx
		lea     rdx, lpClassNameStatic
		lea     r8, lpWindowNameInput
		mov     r9, 50000000h				;WS_CHILD | WS_VISIBLE
		call    CreateWindowExA

		mov     qword ptr [rsp + 20h], 200  ;x = 10 from mainwindow
		mov     qword ptr [rsp + 28h], 10   ;y = 10 from mainwindow
		mov     qword ptr [rsp + 30h], 250  ;width = 250
		mov     qword ptr [rsp + 38h], 30   ;height = 30
		mov     rax, [rbp + 10h]            ;hwnd
		mov     qword ptr [rsp + 40h], rax
		mov     qword ptr [rsp + 48h], 1    ;set hMenu = 1
		mov     qword ptr [rsp + 50h], 0
		mov     qword ptr [rsp + 58h], 0
		xor     rcx, rcx
		lea     rdx, lpClassNameEdit
		xor     r8, r8
		mov     r9, 1350565888				;WS_BORDER | WS_CHILD | WS_VISIBLE
		call    CreateWindowExA

		; second editbox and label
		mov     qword ptr [rsp + 20h], 10   ;x = 10 from mainwindow
		mov     qword ptr [rsp + 28h], 50   ;y = 10 from mainwindow
		mov     qword ptr [rsp + 30h], 150  ;width = 250
		mov     qword ptr [rsp + 38h], 30   ; height = 30
		mov     rax, [rbp + 10h]            ;hwnd
		mov     qword ptr [rsp + 40h], rax
		mov     qword ptr [rsp + 48h], 12   ;set hMenu = 1
		mov     qword ptr [rsp + 50h], 0
		mov     qword ptr [rsp + 58h], 0
		xor     rcx, rcx
		lea     rdx, lpClassNameStatic
		lea     r8, lpWindowNameOutput
		mov     r9, 50000000h				;WS_CHILD | WS_VISIBLE
		call    CreateWindowExA

		mov     qword ptr [rsp + 20h], 200  ;x = 10 from mainwindow
		mov     qword ptr [rsp + 28h], 50   ;y = 50 from mainwindow
		mov     qword ptr [rsp + 30h], 250  ;width = 250
		mov     qword ptr [rsp + 38h], 30   ;height = 30
		mov     rax, [rbp + 10h]            ;hwnd
		mov     qword ptr [rsp + 40h], rax
		mov     qword ptr [rsp + 48h], 2    ;set hMenu = 2
		mov     qword ptr [rsp + 50h], 0
		mov     qword ptr [rsp + 58h], 0
		xor     rcx, rcx
		lea     rdx, lpClassNameEdit
		xor     r8, r8
		mov     r9, 1350567936              ;WS_VISIBLE | WS_CHILD | WS_BORDER | ES_READONLY
		call    CreateWindowExA
		jmp     exitProc

	WM_DESTROY:
		xor		rcx, rcx
		call	PostQuitMessage				;PostQuitMessage(0)
		jmp		exitProc

	 WM_COMMAND:
		mov     rax, [rbp + 20h]
		sub     ax, 1					
		jz      RevEditBox
		jmp     exitProc

		RevEditBox:
			mov     rcx, [rbp + 10h]
			mov     rdx, 1  
			lea     r8, string
			mov     r9, 255
			call    GetDlgItemTextA			;GetDlgItemTextA(hwnd, 1, &buffer, 255) to get text input
			lea     rcx, string
			call    reverse
			mov     rcx, [rbp + 10h]
			mov     rdx, 2
			lea     r8, string
			call    SetDlgItemTextA

    exitProc:
    mov     rsp, rbp
    pop     rbp
    ret

WinProc endp

reverse proc 
	push	rbp
	mov		rbp, rsp
	push	rsi
	push	rdi
	push	rdx
	mov		rsi, rcx
	mov		rdi, rsi
	mov		rdx, rsi
	xor		rax, rax
	xor		rcx, rcx
	cld

	pushSym:
		lodsb
		cmp		al, 0
		jz		popSym
		push	rax
		inc		rcx
		jmp		pushSym
	popSym:
		cmp		rcx, 0
		jz		exit
		pop		rax
		stosb
		dec		rcx
		jmp		popSym
	exit:
		sub		rdi, rdx
		mov		rax, rdi
		sub		rax, 1
		pop		rdx
		pop		rdi
		pop		rsi
		mov		rsp, rbp
		pop		rbp
		ret

reverse endp
end