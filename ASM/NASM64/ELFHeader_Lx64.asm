
section .data
    isELF32             db 0
    isLittle            db 0
    sError              db "Error Occured!", 0 
    sFilename           db "Link to ELF File: ", 0
    ;File Header
    sELF                db "ELF Header:", 0Ah, 0 
    sMagic              db 9, "Magic: ", 0
    sClass              db 9, "Class: ", 0
        sELF32          db "ELF32", 0 
        sELF64          db "ELF64", 0
    sData               db 9, "Data: ", 0
        sLittelEdian    db "Little Edian", 0 
        sBigEdian       db "Big Edian", 0
    sVersion            db 9, "Version: ", 0
    sOSABI              db 9, "OS/ABI: ", 0
    sABIversion         db 9, "ABI Version: ", 0
    ; sPad                db 9, "PAD: " 0
    sType               db 9, "Type: ", 0
    sMachine            db 9, "Machine: ", 0
    sEntryPoint         db 9, "Entry Point Address: ", 0
    sPhoff              db 9, "Start Program Header: ", 0
    sShoff              db 9, "Start Section Header: ", 0
    sFlags              db 9, "Flags: ", 0
    sEhsize             db 9, "Size Header: ", 0
    sPhentsize          db 9, "Size Program Header: ", 0
    sPhnum              db 9, "Number Program Header: ", 0
    sShentsize          db 9, "Size Section Header: ", 0
    sShnum              db 9, "Number Section Header: ", 0
    sShstrndx           db 9, "Index Of The Section Header Table: ", 0
    sEndELF             db "End Of ELF Header.", 0Ah, 0Ah, 0
    ;Program Header
    sProgramHeader      db "Program Header:", 0Ah, 0
    sProgramHeaderTable db "Type", 9, "Flags", 9, "Offset", 9, "VirAdd", 9, "PhyAdd", 9, "Filesz", 9, "Memsz", 9, "Align", 0Ah, 0
    ;Section Header     
    sSectionHeader      db "Section Header:", 0Ah, 0
    sSectionHeaderTable db "Name", 9, 9, "Type", 9, "Flags", 9, "VirAdd", 9, "Offset", 9, "Size", 9, "Link", 9, "Info", 9, "Align", 9, "EntSize", 0Ah, 0

section .bss
    filename    resb 512
    filesize    resq 1
    filedata    resq 1
    fd          resd 1
    fd_stat_sz  resb 144
    hexString   resb 17

section .text
global _start

_start:
    mov     rbp, rsp
    sub     rsp, 40h                                ;local variable

    mov     rdi, 1
    mov     rsi, sFilename
    mov     rdx, 19
    mov     rax, 1
    syscall
    mov     rdi, 0
    mov     rsi, filename
    mov     rdx, 512
    mov     rax, 0
    syscall
    mov     rdi, filename
    call    strlen
    mov     byte [filename + rax], 0                ;insert null
    mov     rdi, filename
    mov     rsi, 0
    mov     rdx, 0
    mov     rax, 2
    syscall
    cmp     eax, -1
    jz      .Exit
    mov     [fd], eax                               ;hOpen = fd
    ;get file size
    mov     rdi, [fd]                               ;hOpen
    mov     rsi, fd_stat_sz                         ;struct stat
    mov     rax, 5
    syscall
    mov     rsi, fd_stat_sz
    mov     rsi, qword [rsi + 30h]                   ;st_size
    mov     [filesize], rsi
    ;allocate mem
    xor     rdi, rdi
    mov     rax, 12
    syscall
    mov     rdi, rax
    mov     [filedata], rdi
    add     rdi, [filesize]
    mov     rax, 12
    syscall
    ;read file to filedata string
    mov     edi, [fd]
    mov     rsi, [filedata]
    mov     rdx, [filesize]
    mov     rax, 0
    syscall
    ;parsing file
    mov     rbx, [filedata]
    ;ELF Header 7f 45 4c 46
    mov     edi, dword [rbx]
    cmp     edi, 0x464c457f
    jne     .Exit
    mov     rdi, 1
    mov     rsi, sELF
    mov     rdx, 12
    mov     rax, 1
    syscall
    ;magic
    mov     rdi, 1
    mov     rsi, sMagic
    mov     rdx, 9
    mov     rax, 1
    syscall
    mov     r12, 0
    .printMagic:
        mov     dil, [rbx + r12]
        mov     rsi, hexString
        call    lltoh
        mov     rsi, hexString
        mov     byte [rsi+rax], 20h
        inc     rax
        mov     rdi, 1
        mov     rdx, rax
        mov     rax, 1
        syscall
        inc     r12
        cmp     r12, 16
        jnz     .printMagic
        mov     rsi, hexString
        mov     rdx, 1
        call    printnl
    ;class
    mov     rdi, 1
    mov     rsi, sClass
    mov     rdx, 8
    mov     rax, 1
    syscall
    mov     dil, [rbx + 4]
    cmp     dil, 1
    jz      .ELF32                      ;ELF32
    mov     rsi, sELF64
    mov     rdx, 5
    call    printnl
    jmp     .Classend
    .ELF32:
        mov     byte [isELF32], 1
        mov     rsi, sELF32
        mov     rdx, 5
        call    printnl
    .Classend:
    ;data
    mov     rdi, 1
    mov     rsi, sData
    mov     rdx, 7
    mov     rax, 1
    syscall
    mov     dil, [rbx + 5]
    cmp     dil, 1
    jz      .Little
    mov     rsi, sBigEdian
    mov     rdx, 9
    call    printnl
    jmp     .Dataend
    .Little:
        mov     byte [isLittle], 1
        mov     rsi, sLittelEdian
        mov     rdx, 13
        call    printnl
    .Dataend:
    ;version
    mov     rdi, 1
    mov     rsi, sVersion
    mov     rdx, 10
    mov     rax, 1
    syscall
    mov     dil, [rbx + 6]
    mov     rsi, hexString
    call    lltoh
    mov     rsi, hexString
    mov     rdx, rax
    call    printnl
    ;OS/ABI
    mov     rdi, 1
    mov     rsi, sOSABI
    mov     rdx, 9
    mov     rax, 1
    syscall
    mov     dil, [rbx + 7]
    mov     rsi, hexString
    call    lltoh
    mov     rsi, hexString
    mov     rdx, rax
    call    printnl
    ;ABIVersion
    mov     rdi, 1
    mov     rsi, sABIversion
    mov     rdx, 14
    mov     rax, 1
    syscall
    mov     dil, [rbx + 8]
    mov     rsi, hexString
    call    lltoh
    mov     rsi, hexString
    mov     rdx, rax
    call    printnl
    ;Type
    mov     rdi, 1
    mov     rsi, sType
    mov     rdx, 7
    mov     rax, 1
    syscall
    mov     di, [rbx + 10h]
    mov     rsi, hexString
    call    lltoh
    mov     rsi, hexString
    mov     rdx, rax
    call    printnl
    ;Machine
    mov     rdi, 1
    mov     rsi, sMachine
    mov     rdx, 10
    mov     rax, 1
    syscall
    mov     di, [rbx + 12h]
    mov     rsi, hexString
    call    lltoh
    mov     rsi, hexString
    mov     rdx, rax
    call    printnl
    ;Entry
    mov     rdi, 1
    mov     rsi, sEntryPoint
    mov     rdx, 22
    mov     rax, 1
    syscall
    cmp     byte [isELF32], 1
    jz      .file32
    .file64:
        mov     rdi, qword [rbx + 18h]
        jmp     .Entry
    .file32:
        mov     edi, dword [rbx + 18h]
    .Entry:
        mov     rsi, hexString
        call    lltoh
        mov     rsi, hexString
        mov     rdx, rax
        call    printnl
    ;Phoff
    mov     rdi, 1
    mov     rsi, sPhoff
    mov     rdx, 23
    mov     rax, 1
    syscall
    cmp     byte [isELF32], 1
    jz      .phoff32
    .phoff64:
        mov     rdi, qword [rbx + 20h]
        mov     [rbp - 08h], rdi
        jmp     .Phoff
    .phoff32:
        mov     edi, dword [rbx + 1Ch]
        mov     [rbp - 08h], edi
    .Phoff:
        mov     rsi, hexString
        call    lltoh
        mov     rsi, hexString
        mov     rdx, rax
        call    printnl
    ;Shoff
    mov     rdi, 1
    mov     rsi, sShoff
    mov     rdx, 23
    mov     rax, 1
    syscall
    cmp     byte [isELF32], 1
    jz      .shoff32
    .shoff64:
        mov     rdi, qword [rbx + 28h]
        mov     [rbp - 10h], rdi
        jmp     .Shoff
    .shoff32:
        mov     edi, dword [rbx + 20h]
        mov     [rbp - 10h], edi
    .Shoff:
        mov     rsi, hexString
        call    lltoh
        mov     rsi, hexString
        mov     rdx, rax
        call    printnl
    mov     r12, 24h
    ;Flags
    mov     rdi, 1
    mov     rsi, sFlags
    mov     rdx, 8
    mov     rax, 1
    syscall
    cmp     byte [isELF32], 1
    jz      .flags32
    .flags64:
        add     r12, 0Ch
        mov     edi, dword [rbx + r12]
        jmp     .Flags
    .flags32:
        mov     edi, dword [rbx + r12]
    .Flags:
        mov     rsi, hexString
        call    lltoh
        mov     rsi, hexString
        mov     rdx, rax
        call    printnl
        add     r12, 4
    ;Ehsize
    mov     rdi, 1
    mov     rsi, sEhsize
    mov     rdx, 14
    mov     rax, 1
    syscall
    mov     di, word [rbx + r12]
    mov     [rbp - 18h], di
    mov     rsi, hexString
    call    lltoh
    mov     rsi, hexString
    mov     rdx, rax
    call    printnl
    add     r12, 2
    ;Phentsize
    mov     rdi, 1
    mov     rsi, sPhentsize
    mov     rdx, 22
    mov     rax, 1
    syscall
    mov     di, word [rbx + r12]
    mov     [rbp - 20h], di
    mov     rsi, hexString
    call    lltoh
    mov     rsi, hexString
    mov     rdx, rax
    call    printnl
    add     r12, 2
    ;Phnum
    mov     rdi, 1
    mov     rsi, sPhnum
    mov     rdx, 24
    mov     rax, 1
    syscall
    mov     di, word [rbx + r12]
    mov     [rbp - 28h], di
    mov     rsi, hexString
    call    lltoh
    mov     rsi, hexString
    mov     rdx, rax
    call    printnl
    add     r12, 2
    ;Shentsize
    mov     rdi, 1
    mov     rsi, sShentsize
    mov     rdx, 22
    mov     rax, 1
    syscall
    mov     di, word [rbx + r12]
    mov     [rbp - 30h], di
    mov     rsi, hexString
    call    lltoh
    mov     rsi, hexString
    mov     rdx, rax
    call    printnl
    add     r12, 2
    ;Shnum
    mov     rdi, 1
    mov     rsi, sShnum
    mov     rdx, 24
    mov     rax, 1
    syscall
    mov     di, word [rbx + r12]
    mov     [rbp - 38h], di
    mov     rsi, hexString
    call    lltoh
    mov     rsi, hexString
    mov     rdx, rax
    call    printnl
    add     r12, 2
    ;Shstrndx
    mov     rdi, 1
    mov     rsi, sShstrndx
    mov     rdx, 36
    mov     rax, 1
    syscall
    mov     di, word [rbx + r12]
    mov     [rbp - 40h], di
    mov     rsi, hexString
    call    lltoh
    mov     rsi, hexString
    mov     rdx, rax
    call    printnl
    add     r12, 2
    ;End of ELF Header
    mov     rdi, 1
    mov     rsi, sEndELF
    mov     rdx, 21
    mov     rax, 1
    syscall

    ; dq -8 	e_phoff
    ; dq -10    e_shoff
    ; dw -18	e_ehsize
    ; dw -20	e_phentsize
    ; dw -28	e_phnum
    ; dw -30	e_shentsize
    ; dw -38	e_shnum
    ; dw -40	e_shstrndx

    ;section header
    mov     rdi, 1
    mov     rsi, sSectionHeader
    mov     rdx, 16
    mov     rax, 1
    syscall
    mov     rdi, 1
    mov     rsi, sSectionHeaderTable
    mov     rdx, 3Dh
    mov     rax, 1
    syscall
    ;sh_name
    mov     r12w, 0
    add     rbx, [rbp - 10h]                ;shoff
    mov     rax, [rbp - 30h]                ;shentsize
    mov     r13, [rbp - 40h]                ;shstrndx
    mul     r13                             ;rax = size*index
    mov     r13, rax                        ;r13 = rax
    add     r13, rbx                        ;r13 = &section
    .nextSection:
        cmp     r12w, [rbp - 38h]           ;shnum
        jz      .SectionHeader
        mov     edi, dword [rbx]
        cmp     byte [isELF32], 1
        jz      .shname32
        .shname64:
            add     rdi, [r13 + 18h]
            add     rdi, [filedata]
            jmp     .Name
        .shname32:
            add     rdi, [r13 + 10h]
            add     rdi, [filedata]
        .Name:
            mov     rsi, rdi
            mov     rdi, rsi
            call    strlen
            mov     r15, rax
            mov     rdi, 1
            mov     rdx, rax
            mov     rax, 1
            syscall
    ;tab tab
    mov     rdi, 1
    mov     rsi, hexString
    mov     byte [rsi], 9
    mov     rdx, 1
    mov     rax, 1
    cmp     r15, 8
    jl      .inserttab
    jmp     .printtab
    .inserttab:
        mov     byte [rsi + rdx], 9
        inc     rdx
    .printtab:
        mov     rsi, hexString
        syscall
    ;sh_type
    mov     edi, dword [rbx + 4]
    mov     rsi, hexString
    call    lltoh
    mov     rsi, hexString
    mov     rdx, rax
    call    printtab

    mov     r9, 08h
    ;sh_flags
    cmp     byte [isELF32], 1
    jz      .shflags32
    .shflags64:
        mov     rdi, qword [rbx + r9]
        add     r9, 4
        jmp     .shflag
    .shflags32:
        mov     edi, dword [rbx + r9]
    .shflag:
        mov     rsi, hexString
        call    lltoh
        mov     rsi, hexString
        mov     rdx, rax
        call    printtab
        add     r9, 4
    ;sh_addr
    cmp     byte [isELF32], 1
    jz      .shaddr32
    .shaddr64:
        mov     rdi, qword [rbx + r9]
        add     r9, 4
        jmp     .shaddr 
    .shaddr32:
        mov     edi, dword [rbx + r9]
    .shaddr:
        mov     rsi, hexString
        call    lltoh
        mov     rsi, hexString
        mov     rdx, rax
        call    printtab
        add     r9, 4
    ;sh_offset
    cmp     byte [isELF32], 1
    jz      .offset32
    .offset64:
        mov     rdi, qword [rbx + r9]
        add     r9, 4
        jmp     .offsett
    .offset32:
        mov     edi, dword [rbx + r9]
    .offsett:
        mov     rsi, hexString
        call    lltoh
        mov     rsi, hexString
        mov     rdx, rax
        call    printtab
        add     r9, 4
    ;sh_size
    cmp     byte [isELF32], 1
    jz      .shsize32
    .shsize64:
        mov     rdi, qword [rbx + r9]
        add     r9, 4
        jmp     .shsize 
    .shsize32:
        mov     edi, dword [rbx + r9]
    .shsize:
        mov     rsi, hexString
        call    lltoh
        mov     rsi, hexString
        mov     rdx, rax
        call    printtab
        add     r9, 4
    ;sh_link
    mov     edi, dword [rbx + r9]
    mov     rsi, hexString
    call    lltoh
    mov     rsi, hexString
    mov     rdx, rax
    call    printtab
    add     r9, 4
    ;sh_info
    mov     edi, dword [rbx + r9]
    mov     rsi, hexString
    call    lltoh
    mov     rsi, hexString
    mov     rdx, rax
    call    printtab
    add     r9, 4
    ;sh_addralign
    cmp     byte [isELF32], 1
    jz      .shaddralign32
    .shaddralign64:
        mov     rdi, qword [rbx + r9]
        add     r9, 4
        jmp     .shaddralign
    .shaddralign32:
        mov     edi, dword [rbx + r9]
    .shaddralign:
        mov     rsi, hexString
        call    lltoh
        mov     rsi, hexString
        mov     rdx, rax
        call    printtab
        add     r9, 4
    ;sh_entsize
    cmp     byte [isELF32], 1
    jz      .entsize32
    .entsize64:
        mov     rdi, qword [rbx + r9]
        add     r9, 4
        jmp     .entsize
    .entsize32:
        mov     edi, dword [rbx + r9]
    .entsize:
        mov     rsi, hexString
        call    lltoh
        mov     rsi, hexString
        mov     rdx, rax
        call    printnl
        add     r9, 4
    inc     r12w
    mov     rdi, [rbp - 30h]
    add     rbx, rdi
    jmp     .nextSection
    .SectionHeader:
        mov     rsi, hexString
        mov     rdx, 0
        call    printnl
    
    ;Program Header
    mov     rdi, 1
    mov     rsi, sProgramHeader
    mov     rdx, 16
    mov     rax, 1
    syscall
    mov     rdi, 1
    mov     rsi, sProgramHeaderTable
    mov     rdx, 34h
    mov     rax, 1
    syscall
    mov     rbx, [filedata]
    add     rbx, [rbp - 08h]  
    mov     r12, 0                      ;Phoff
    .nextProgram:
        cmp     r12, [rbp - 28h]
        jz      .ProgramHeader
    ;p_type
    mov     edi, dword [rbx + 0h]
    mov     rsi, hexString
    call    lltoh
    mov     rsi, hexString
    mov     rdx, rax
    call    printtab
    ;p_flags
    cmp     byte [isELF32], 1
    jz      .pflags32
    .pflags64:
        mov     edi, dword [rbx + 04h]
        jmp     .Pflags 
    .pflags32:
        mov     edi, dword [rbx + 18h]
    .Pflags:
        mov     rsi, hexString
        call    lltoh
        mov     rsi, hexString
        mov     rdx, rax
        call    printtab
    mov     r9, 4
    ;p_offset
    cmp     byte [isELF32], 1
    jz      .poffset32
    .poffset64:
        add     r9, 4
        mov     rdi, qword [rbx + r9]
        jmp     .Poffset 
    .poffset32:
        mov     edi, dword [rbx + r9]
    .Poffset:
        mov     rsi, hexString
        call    lltoh
        mov     rsi, hexString
        mov     rdx, rax
        call    printtab
        add     r9, 4
    ;p_vaddr
    cmp     byte [isELF32], 1
    jz     .pvaddr32
    .pvaddr64:
        add     r9, 4
        mov     rdi, qword [rbx + r9]
        jmp     .Pvaddr 
    .pvaddr32:
        mov     edi, dword [rbx + r9]
    .Pvaddr:
        mov     rsi, hexString
        call    lltoh
        mov     rsi, hexString
        mov     rdx, rax
        call    printtab
        add     r9, 4
    ;p_addr
    cmp     byte [isELF32], 1
    jz      .paddr32 
    .paddr64:
        add     r9, 4
        mov     rdi, qword [rbx + r9]
        jmp     .Paddr 
    .paddr32:
        mov     edi, dword [rbx + r9]
    .Paddr:
        mov     rsi, hexString
        call    lltoh
        mov     rsi, hexString
        mov     rdx, rax
        call    printtab
        add     r9, 4
    ;p_filesz
    cmp     byte [isELF32], 1
    jz      .pfilesz32
    .pfilesz64:
        add     r9, 4
        mov     rdi, qword [rbx + r9]
        jmp     .Pfilesz 
    .pfilesz32:
        mov     edi, dword [rbx + r9]
    .Pfilesz:
        mov     rsi, hexString
        call    lltoh
        mov     rsi, hexString
        mov     rdx, rax
        call    printtab
        add     r9, 4
    ;p_memsz
    cmp     byte [isELF32], 1
    jz      .pmemsz32
    .pmemsz64:
        add     r9, 4
        mov     rdi, qword [rbx + r9]
        jmp     .Pmemsz 
    .pmemsz32:
        mov     edi, dword [rbx + r9]
    .Pmemsz:
        mov     rsi, hexString
        call    lltoh
        mov     rsi, hexString
        mov     rdx, rax
        call    printtab
        add     r9, 4
    ;p_align
    cmp     byte [isELF32], 1
    jz      .palign32 
    .palign64:
        add     r9, 4
        mov     rdi, qword [rbx + r9]
        jmp     .Palign 
    .palign32:
        mov     edi, dword [rbx + r9]
    .Palign: 
        mov     rsi, hexString
        call    lltoh
        mov     rsi, hexString
        mov     rdx, rax
        call    printnl
    inc     r12
    mov     rdi, [rbp - 20h]
    add     rbx, rdi
    jmp     .nextProgram

    .ProgramHeader:
        mov     rdi, [filedata]
        mov     rax, 12
        syscall                                     ;free mem
        mov     rdi, [fd]
        mov     rax, 3
        syscall                                     ;close file
        mov     rsi, hexString
        mov     rdx, 0
        call    printnl
        mov     rdi, 0
        mov     rax, 60
        syscall

    .Exit:                                  ;error 
        mov     rdi, 1
        mov     rsi, sError
        mov     rdx, 15
        mov     rax, 1
        syscall
        mov     rdi, 0
        mov     rax, 60
        syscall

lltoh:                   ;lltoh([in] val, [out] hexString) convert int64 to hex string return szArr in rax
    push    rbp
    mov     rbp, rsp
    mov     rax, rdi
    mov     rdi, rsi                        ;hexString
    mov     r14, rdi
    mov     r10, 16
    push    0h 

    .Calc:
        xor     rdx, rdx
        div     r10
        cmp     rdx, 10
        jl      .Number 
        add     rdx, 37h                    ;a->f --> 'a'->'f'
        jmp     .Save

    .Number:
        add     rdx, 30h

    .Save:
        push    rdx
        cmp     rax, 0
        jz      .PopSym
        jmp     .Calc
    
    .PopSym:
        pop     rax
        cmp     rax, 0h 
        jz      .Exit
        stosb
        jmp     .PopSym

    .Exit:
        sub     rdi, r14
        mov     rax, rdi
        mov     rsp, rbp
        pop     rbp
        ret

strlen:             ;strlen(rdi = &string --> return rax = len)
    push    rbp
    mov     rbp, rsp
    xor     rax, rax

    .NextChar:
        cmp     byte [rdi], 0Ah
        jz      .Exit
        cmp     byte [rdi], 0
        jz      .Exit
        inc     rdi
        inc     rax
        jmp     .NextChar

    .Exit:
        mov     rsp, rbp
        pop     rbp
        ret

printnl:            ;printnl = print(string) + print(\n)
    mov     byte [rsi + rdx], 0Ah
    inc     rdx
    mov     rdi, 1
    mov     rax, 1
    syscall 
    ret   

printtab:           ;printnl = print(string) + print(" ")
    mov     byte [rsi + rdx], 9
    inc     rdx
    mov     rdi, 1
    mov     rax, 1
    syscall 
    ret    